// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Tokens {
  id                    Int     @id @default(autoincrement())
  address               String? @unique
  pairAddress           String?
  priceUSD              String?
  quoteToken            String?
  createdAt             Int?
  name                  String?
  symbol                String?
  change24              String?
  liquidity             String?
  volume24              String?
  token                 Json?
  cronCount             Int?
  networkId             Int?
  image                 String?
  liquidityTokenSymbol  String?
  liquidityTokenAddress String?
  txnCount24            Int?
  twitterUrl            String?
}

model Blacklist {
  id           Int    @id @default(autoincrement())
  tokenAddress String @unique
}

model Votes {
  id            Int      @id @default(autoincrement())
  date          DateTime @default(now())
  tokenAddress  String
  walletAddress String
}

model Score {
  tokenAddress                      String  @id @unique
  tokenScore                        Float
  symbol                            String?
  image                             String?
  liquidityTokenSymbol              String?
  networkId                         Int?
  liquidity                         String?
  liquidityScore                    Float?
  scoreFromVolume                   Float?
  votesCount24                      Float?
  scoreFromVotesFor24h              Float?
  scoreFromVotes                    Float?
  votersPercentageFor24h            Float?
  scoreFromVotersPercentageFor24h   Float?
  votesPercentageFor24h             Float?
  scoreFromVotesPercentageFor24h    Float?
  scoreFromVotesPercentageFor7d     Float?
  votesPercentageFor7d              Float?
  change24                          String?
  scoreFromChange24                 Float?
  volume                            String?
  volumeTwoDaysAgo                  String?
  scoreFromVolumeTwoDaysAgo         Float?
  volumeChangePercentage            Float?
  scoreFromVolumePercentage         Float?
  createdAt                         Int?
  txnCount24                        Int?
  txnCount24Score                   Float?
  holders                           Int?
  holdersCountScore                 Float?
  holdersGrowthPercentage1h         Float?
  scoreHoldersGrowthPercentage1h    Float?
  holdersGrowthPercentage24h        Float?
  scoreHoldersGrowthPercentage24h   Float?
  aiScore                           Float?
  tokenAgeScore                     Float?
}

model ScoreByHours {
  tokenAddress  String @id @unique
  tokenScore0h  Float?
  tokenScore1h  Float?
  tokenScore2h  Float?
  tokenScore3h  Float?
  tokenScore4h  Float?
  tokenScore5h  Float?
  tokenScore6h  Float?
  tokenScore7h  Float?
  tokenScore8h  Float?
  tokenScore9h  Float?
  tokenScore10h Float?
  tokenScore11h Float?
  tokenScore12h Float?
  tokenScore13h Float?
  tokenScore14h Float?
  tokenScore15h Float?
  tokenScore16h Float?
  tokenScore17h Float?
  tokenScore18h Float?
  tokenScore19h Float?
  tokenScore20h Float?
  tokenScore21h Float?
  tokenScore22h Float?
  tokenScore23h Float?
}

model DailyScore {
  tokenAddress      String @id @unique
  averageScoreToday Float?
  averageScore24Ago Float?
  averageScore48Ago Float?
  updatedAt         DateTime @default(now())
}

model Users {
  walletAddress         String   @id @unique
  telegramId            String?
  votes                 Int      @default(5)
  updatedAt             DateTime @default(now())
  refreshToken          String?
  refreshTokenCreatedAt DateTime? @default(now())
  freeTrialWasTaken     Boolean  @default(false)
  id                    Int      @unique @default(autoincrement())
  ownRefId              String?  @unique
  registrationRefId     String?
  holdingTWAmount       String?
  holdingTWAmountUSDT   String?
  subscriptionLevel     String?
  trialCreatedAt        DateTime?
  planWasTakenAt        DateTime?
}

model Volume {
  id              Int      @id @default(autoincrement())
  address         String
  volumeCreatedAt DateTime @default(now())
  volume24        String?
  change24        String?  @default("0")
}

model PostedTokens {
  tokenAddress String   @id @unique
  createdAt    DateTime @default(now())
}

model Holders {
  id              Int @id @default(autoincrement())
  tokenAddress    String?
  holdersCount    Int? @default(0)
  createdAt       DateTime @default(now())
}

model Subscriptions {
  id                  Int @id @default(autoincrement())
  title               String
  subTitle            String?
  description         String?
  period              String
  holdingTWAmount     Int
}

model TtmsByHours {
  id          Int @id @default(autoincrement())
  score3am       Json?
  score9am       Json?
  score3pm       Json?
  score9pm       Json?
  createdAt      DateTime @default(now())
}

model TgWhiteList {
  telegramId    String @id @unique
}

model TtmsPortfolio {
  id                                Int @id @default(autoincrement())
  tokenAddress                      String
  score                             Float?
  symbol                            String
  priceUSD                          String
  startedAt                         String
  ATH                               String?
  ATL                               String?
  dailyPriceChange095               String?
  currentPrice                      String?
  exitPrice                         String?
  quoteToken                        String?
  pairAddress                       String?
  networkId                         Int?
  image                             String?
  liquidityTokenSymbol              String?
  liquidityTokenAddress             String?
  stopLoss                          String @default("-3")
  interval                          Int?
  intervalCheck                     Int?

  liquidity                         String?
  liquidityScore                    Float?
  scoreFromVolume                   Float?
  votesCount24                      Float?
  scoreFromVotesFor24h              Float?
  scoreFromVotes                    Float?
  votersPercentageFor24h            Float?
  scoreFromVotersPercentageFor24h   Float?
  votesPercentageFor24h             Float?
  scoreFromVotesPercentageFor24h    Float?
  scoreFromVotesPercentageFor7d     Float?
  votesPercentageFor7d              Float?
  change24                          String?
  scoreFromChange24                 Float?
  volume                            String?
  volumeTwoDaysAgo                  String?
  scoreFromVolumeTwoDaysAgo         Float?
  volumeChangePercentage            Float?
  scoreFromVolumePercentage         Float?
  createdAt                         Int?
  txnCount24                        Int?
  txnCount24Score                   Float?
  holders                           Int?
  holdersCountScore                 Float?
  holdersGrowthPercentage1h         Float?
  scoreHoldersGrowthPercentage1h    Float?
  holdersGrowthPercentage24h        Float?
  scoreHoldersGrowthPercentage24h   Float?
  aiScore                           Float?
  tokenAgeScore                     Float?
}

model Last24SolvedTtmsPortfolio {
  id               Int @id @default(autoincrement())
  portfolio        Json
  startedAt        String
  createdAt        DateTime @default(now())
  interval         Int?
}

model AverageTtmsPortfolioResults {
  id                                    Int @id @default(autoincrement())
  average24Result                       String  @default("0")
  average48Result                       String  @default("0")
  startedAt                             String
  createdAt                             DateTime @default(now())
  average24ResultOn1Network             String @default("0")
  average48ResultOn1Network             String @default("0")
  average24ResultOn56Network            String @default("0")
  average48ResultOn56Network            String @default("0")
  average24ResultOn8453Network          String @default("0")
  average48ResultOn8453Network          String @default("0")
  average24ResultOn10Network            String @default("0")
  average48ResultOn10Network            String @default("0")
  average24ResultOn42161Network         String @default("0")
  average48ResultOn42161Network         String @default("0")
  average24ResultOn43114Network         String @default("0")
  average48ResultOn43114Network         String @default("0")
  average24ResultOn137Network           String @default("0")
  average48ResultOn137Network           String @default("0")
  average24ResultOn1399811149Network    String @default("0")
  average48ResultOn1399811149Network    String @default("0")
}

model Airdrops {
  id                    Int @id @default(autoincrement())
  airdropName           String @unique
  usersLimit            Int
  currentProgress       Int @default(0)
  status                String @default("ongoing")
  participants          AirdropsParticipants[]
}

model AirdropsParticipants {
  id                  Int @id @default(autoincrement())
  walletAddress       String
  telegramId          String?
  airdropName         String
  createdAt           DateTime @default(now())
  planActivatedAt     DateTime?
  airdropAchievedAt   DateTime?
  airdrop             Airdrops @relation(fields: [airdropName], references: [airdropName])
  @@unique([walletAddress, airdropName])
}

model TokenWatch {
  id                    Int     @id @default(autoincrement())
  address               String? @unique
  priceUSD              String?
  name                  String?
  symbol                String?
  token                 Json?
  holders               Int?
}

model SignalBotUsers {
  id          Int       @id @default(autoincrement())
  telegramId  String    @unique
  userName    String?
  createdAt   DateTime  @default(now())
  status      Status    @default(active)
}

enum Status {
  active
  inactive
}

model Partners {
  partnerLogin      String @id @unique
  partnerAccess     String @default("plan1")
}
